
public void PdfFileCreator()
{

            string filename = "mpt.pdf";
            Document doc = new Document();
            PdfPTable tableLayout = new PdfPTable(4);
            byte[] fileBytes = System.Text.Encoding.UTF8.GetBytes(content.ToCharArray());

            // create a file with the given filename in the local folder; replace any existing file with the same name
            StorageFile file = await Windows.Storage.ApplicationData.Current.LocalFolder.CreateFileAsync(filename, CreationCollisionOption.ReplaceExisting);

            // write the char array created from the content string into the file
            using (var stream = await file.OpenStreamForWriteAsync())
            {
                //stream.Write(fileBytes, 0, fileBytes.Length);
                List<long> xrefs = new List<long>();
                using (StreamWriter writer = new StreamWriter(stream))
                { // PDF-HEADER 
                    writer.WriteLine("%PDF-1.2");
                    writer.Write("%");
                    writer.Flush();
                    stream.Write(new byte[] { 0xc7, 0xec, 0x8f, 0xa2 }, 0, 4);
                    stream.Flush();
                    writer.WriteLine("");

                    // #1: catalog - the overall container of the entire PDF 
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("1 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Catalog");
                    writer.WriteLine("  /Pages 2 0 R");
                    writer.WriteLine(">>");
                    writer.WriteLine("endobj");

                    // #2: page-list - we have only one child page 
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("2 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Pages");
                    writer.WriteLine("  /Kids [3 0 R]");
                    writer.WriteLine("  /Count 1");
                    writer.WriteLine(">>");
                    writer.WriteLine("endobj");

                    // #3: page - this is our page. We specify size, font resources, and the contents 
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("3 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Page");
                    writer.WriteLine("  /Parent 2 0 R");
                    writer.WriteLine("  /MediaBox [0 0 612 792]");
                    // Default userspace units: 72/inch, origin at bottom left 
                    writer.WriteLine("  /Resources");
                    writer.WriteLine("  <<");
                    writer.WriteLine("    /ProcSet [/PDF/Text]");
                    // This PDF uses only the Text ability 
                    writer.WriteLine("    /Font");
                    writer.WriteLine("    <<");
                    writer.WriteLine("      /F0 4 0 R");
                    // I will define three fonts, #4, #5 and #6 
                    writer.WriteLine("      /F1 5 0 R");
                    writer.WriteLine("      /F2 6 0 R");
                    writer.WriteLine("    >>");
                    writer.WriteLine("  >>");
                    writer.WriteLine("  /Contents 7 0 R");
                    writer.WriteLine(">>");
                    writer.WriteLine("endobj");

                    // #4, #5, #6: three font resources, all using fonts that are built into all PDF-viewers 
                    // We're going to use WinAnsi character encoding, defined below. 
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("4 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Font");
                    writer.WriteLine("  /Subtype /Type1");
                    writer.WriteLine("  /Encoding /WinAnsiEncoding");
                    writer.WriteLine("  /BaseFont /Times-Roman");
                    writer.WriteLine(">>");
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("5 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Font");
                    writer.WriteLine("  /Subtype /Type1");
                    writer.WriteLine("  /Encoding /WinAnsiEncoding");
                    writer.WriteLine("  /BaseFont /Times-Bold");
                    writer.WriteLine(">>");
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    writer.WriteLine("6 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Type /Font");
                    writer.WriteLine("  /Subtype /Type1");
                    writer.WriteLine("  /Encoding /WinAnsiEncoding");
                    writer.WriteLine("  /BaseFont /Times-Italic");
                    writer.WriteLine(">>");

                    // #7: contents of page. This is written in postscript, fully described in 
                    // chapter 8 of the PDF 1.2 reference manual. 
                    writer.Flush();
                    stream.Flush();
                    xrefs.Add(stream.Position);
                    System.Text.StringBuilder sb = new System.Text.StringBuilder();
                    sb.AppendLine("BT");
                    // BT = begin text object, with text-units the same as userspace-units 
                    sb.AppendLine("/F0 40 Tf");
                    // Tf = start using the named font "F0" with size "40" 
                    sb.AppendLine("40 TL");
                    // TL = set line height to "40" 
                    sb.AppendLine("230.0 400.0 Td");
                    // Td = position text point at coordinates "230.0", "400.0" 
                    sb.AppendLine("(Hello all) '");
                    // Apostrophe = print the text, and advance to the next line 
                    sb.AppendLine("/F2 20 Tf");
                    // 
                    sb.AppendLine("20 TL");
                    // 
                    sb.AppendLine("0.0 0.2 1.0 rg");
                    // rg = set fill color to RGB("0.0", "0.2", "1.0") 
                    sb.AppendLine("(ol" + enc("Ã©") + ") '");
                    sb.AppendLine("ET");
                    // 
                    // 
                    writer.WriteLine("7 0 obj");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Length " + sb.Length);
                    writer.WriteLine(">>");
                    writer.WriteLine("stream");
                    writer.Write(sb.ToString());
                    writer.WriteLine("endstream");
                    writer.WriteLine("endobj");

                    // PDF-XREFS. This part of the PDF is an index table into every object #1..#7 
                    // that we defined. 
                    writer.Flush();
                    stream.Flush();
                    dynamic xref_pos = stream.Position;
                    writer.WriteLine("xref");
                    writer.WriteLine("1 " + xrefs.Count);
                    foreach (var xref in xrefs)
                    {

                        writer.WriteLine("{0:0000000000} {1:00000} n", xref, 0);
                    }

                    // PDF-TRAILER. Every PDF ends with this trailer. 
                    writer.WriteLine("trailer");
                    writer.WriteLine("<<");
                    writer.WriteLine("  /Size " + xrefs.Count);
                    writer.WriteLine("  /Root 1 0 R");
                    writer.WriteLine(">>");
                    writer.WriteLine("startxref");
                    writer.WriteLine(xref_pos);
                    writer.WriteLine("%%EOF");
                }
            }

}
